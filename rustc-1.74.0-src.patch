# mrustc doesn't have as good non-zero niche optimisation
--- compiler/rustc_parse_format/src/lib.rs
+++ compiler/rustc_parse_format/src/lib.rs
@@ -1052,3 +1052,3 @@ 
 // Assert a reasonable size for `Piece`
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 rustc_index::static_assert_size!(Piece<'_>, 16);
--- compiler/rustc_ast/src/ast.rs
+++ compiler/rustc_ast/src/ast.rs
@@ -3167,4 +3167,4 @@
 // Some nodes are used a lot. Make sure they don't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 mod size_asserts {
     use super::*;
--- compiler/rustc_hir/src/hir.rs
+++ compiler/rustc_hir/src/hir.rs
@@ -4078,4 +4078,4 @@
 // Some nodes are used a lot. Make sure they don't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 mod size_asserts {
     use super::*;
--- compiler/rustc_errors/src/lib.rs
+++ compiler/rustc_errors/src/lib.rs
@@ -87,7 +87,7 @@
 // (See also the comment on `DiagnosticBuilderInner`'s `diagnostic` field.)
 #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 rustc_data_structures::static_assert_size!(PResult<'_, bool>, 16);
 
 #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, Encodable, Decodable)]
--- compiler/rustc_const_eval/src/interpret/operand.rs
+++ compiler/rustc_const_eval/src/interpret/operand.rs
@@ -755,5 +755,5 @@
 
 // Some nodes are used a lot. Make sure they don't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 mod size_asserts {
     use super::*;
--- compiler/rustc_const_eval/src/interpret/place.rs
+++ compiler/rustc_const_eval/src/interpret/place.rs
@@ -1091,5 +1091,5 @@
 
 // Some nodes are used a lot. Make sure they don't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 mod size_asserts {
     use super::*;
--- compiler/rustc_index/src/bit_set.rs
+++ compiler/rustc_index/src/bit_set.rs
@@ -411,3 +411,3 @@
 // This type is used a lot. Make sure it doesn't unintentionally get bigger.
-#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64", not(rust_compiler = "mrustc")))]
 crate::static_assert_size!(Chunk, 16);
